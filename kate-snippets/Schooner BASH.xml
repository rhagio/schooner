<snippets namespace="" license="LGPL v2+" filetypes="Bash" authors="Bill Cane" name="Schooner BASH">
 <script></script>
 <item>
  <displayprefix></displayprefix>
  <match>timestamp</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>timestamp=$(date +"%Y%m%d-%H%M%S")</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>if-elif-else</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>if  [[ %{condition} ]] ; then
	%{statement1}
elif  ; then
	%{statement2}
else
	%{statement3}
fi</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>function</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>%{function-name}()
# Purpose:     %{purpose}
# Notes:       %{notes}
# Args:        $1:%{a1}
#              $2:%{a2}
#              $3:%{a3}
#              $4:%{a4}
# Exit status: 0:success 
#              1:fail
# StdOut:      %{StdOut}
{
	local %{v1}; local %{v2}; local %{v3}; local %{v4}
	%{v1}="$1"; %{v2}="$2"; %{v3}="$3"; %{v4}="$4";	
	return 0
}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>sch-usage</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>usage()
# Purpose: describe usage of this script
# Args:    none
# Returns: 0 success
{
cat &lt;&lt; EOF
NAME
       %{scriptname} - %{purpose}

SYNOPSIS
       %{scriptname} [OPTION]... [FILE]...

DESCRIPTION
       %{usagedesc1}

       %{usagedesc2}

       -h help
              display this help and exit

       -v version
              output version information and exit

       -%{opt-1}
              %{opt1details}

       -%{opt-2}
              %{opt2details}

       -%{opt-3}
              %{opt3details}

       -%{opt-4}
              %{opt4details}

       %{optionsconcludingnotes}

EXIT STATUS
       0      if OK
       1      if failed       
       stdout %{putonstdout}
       
USAGE
       %{usage+examples1}
       
       %{usage+examples2}

EOF
}
</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>sch-file-header</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>#!/bin/dash 
#=======================================================================
# File:      %{script-name}
# Created:   %{date}
# Purpose:   %{script-purpose}
# Author:    %{loginname}
# Email:     %{email}
# Copyright: Â© %{author}
#
# Licence: This program is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or(at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see &lt;http://www.gnu.org/licenses/>.
#
#=======================================================================



</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>case</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>case "$%{word}" in
# word is expanded using tilde, parameter and variable expansion,
# arithmetic, command and process substitution; and quote removal. 
# no word splitting, brace, or pathname expansion is done, so you 
# can leave expansions unquoted without problems:
	%{pattern1} ) %{statements1} ;;
	%{pattern2} ) %{statements2} ;;
	%{pattern3} ) %{statements3} ;;
	%{pattern4|5} | 5 ) %{statement4|5} ;;	
	%{pattern6} ) %{statements6} ;; # execute then break
	%{pattern7} ) %{statements7} ;&amp; # execute next block without testing its pattern
	%{pattern8} ) %{statements8} ;;&amp; # like ;; but case doesn't terminate after executing associated list
	* ) %{default-statements} ;;	
esac
</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>sch-getopts</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin># process options and args
local %{Option}='Option'
while getopts ":%{opt1}:%{opt2}:%{opt3}:%{opt4}" %{Option}
# place colon after any option expecting an arg
do
	case "$Option" in		
		%{opt1} ) %{statements1} ;;
		%{opt2} ) %{statements2} ;;
		%{opt3} ) %{statements3} ;; 
		%{opt4} ) %{statements4} ;; 
		# default. option missing expected arg will fall thru to *)
		* ) usage; exit 1 ;;			   
	esac
done</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>rsync</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>rsync -avz \
	--exclude '%{exclude-path1}' \
	--exclude '%{exclude-path2}' \
	--exclude '%{exclude-path3}' \
	%{from-path}/ %{to-path} 	</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>if-else</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>if [[ %{condition} ]]; then
	%{action1}
else
	%{action2}
fi</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>todays-date</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>%{date}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>sch-ini-get-value</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>%{value}=$(sch-ini -a 'get-value' -f "$%{file}" -s "$%{section}" -p "$%{param}")</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>sch-ini-set-value</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>sch-ini -a 'set-value' -f "$%{file}" -s "$%{section}" -p "$%{param}" -p "$%{value}"</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>read-sch-user-conf</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>%{value}=$(read-sch-user-conf '%{param}')</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>write-sch-user-conf</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>write-sch-user-conf '%{param}' "$%{value}"</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>read-sch-conf</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>%{value}=$(read-sch-conf '%{param}')</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>write-sch-conf</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>write-sch-conf '%{param}' "$%{value}"</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>abort-if-not-root</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>abort-if-not-root $LINENO</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>abort-if-root</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>abort-if-root $LINENO</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>write-scripts-log</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>write-scripts-log "%{log-entry}" $LINENO</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>prompt-y-n</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>prompt-y-n "%{prompt-message}"
[[ %? == 0 ]] &amp;&amp; %{action-if-yes}
#alternative
if [[ %? == 0 ]] ;then 
	%{action-if-yes}
else
	%{action-if-no}
fi</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>while-index</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>local %{idx}=1
while [[ $%{idx} -le %{max} ]]; do
	%{statements}
	%{idx}=$(( $%{idx} + 1 ))
done</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>sch-script-template</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>aa</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>test-file-alternatives</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>[[ -%{operator} %{file1} ]] 
# e exists | f regular | d dir | L link | h symlink 
# r readable | w writable | x executable | s not empty
[[ %{file1} -%{operator} %{file2} ]]
# nt newer than | ot older than
</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>test-integer-comparison</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin># eq == | ne != | lt &lt; | gt > | ge >= | le &lt;=
[[ %{operand1} -%{operator} %{operand2} ]] </fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>arithmetic-expansion</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>$(( %{operand1} %{operator} %{operand2} ))
# in order of precedence...
# + unary plus | - unary minus 
# ! logical negation | ~ bitwise negation
# ** exponentiation
# * multiplication | / division | % remainder
# + addition | - subtraction
# &lt;&lt; L bitwise shift | >> R bitwise shift
# &lt;= | >= | &lt; | > (comparison)
# == equality | != inequality
# &amp; bitwise AND
# | bitwise OR
# ^ bitwise XOR
# &amp;&amp; logical AND
# || logical OR
# ? (conditional operator syntax is expr ? expr : expr)
# = | *= | /= | %= | -= | &lt;&lt;= | >>= | &amp;= | ^= | |= (assignmnts)
# , (multiple statement syntax is expr,expr)
</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>ls</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>ls -%{option} %{path}
# A omi . and .. | b print escapes for nongraphics
# c sort by (and show) time
# C list entries by columns
# d list dirs but not contents
# h print human-readable sizes
# R list subdirs recursively
# S sort by file sizes
# t sort by modification
# x sort by extension</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>apt-get-remove-purge</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>apt-get --yes --purge remove 	%{package}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>add-apt-repository</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>add-apt-repository --yes ppa:%{repo}/%{ppa}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>apt-get-install</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>apt-get --yes install %{package}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>username</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>%{User}="$(whoami)"</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>scriptname</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>%{ScriptName}="$(basename $0)"</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>hostname</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>%{HostName}="$(hostname)"</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>date-YYYY-HH-MM-SS</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>$(date +"%Y-%d-%m-%S")</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>delete-oldest-if->n-files-in-dir</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>if [[ $(ls -A %{'some-dir'} |wc -l) -gt %{'max-files-to-keep'} ]]; then
	cd %{'some-dir'} &amp;&amp; rm -Rf $(ls -tr | head -n 1)
fi</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>sch-helpers</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin># helpers =====================================================================
readonly HostName="$(hostname)" 
readonly Script="$(basename $0)" 
readonly User="$(whoami)"
readonly Now=$(date +"%Y-%m-%d-%H-%M")
readonly Success=0 Fail=1 Abort=9 Yes=0 No=1
readonly SchPath='/usr/share/schooner'
readonly GlobalConf="$SchPath/global-conf"
readonly UserSchPath="$HOME/.sch"
readonly UserConf="$SchUserPath/user-conf"
readonly SchDev='/home/attic/sch-dev'

prompt_y_n()
# Purpose: allow user to select yes/no response to message printed to terminal
# Args:    $1:message
# Returns: 0:yes 1:no
{
	echo $1	
	select YN in "Yes" "No"; do
		case $YN in
			Yes ) return 0;;
			No )  return 1;;
		esac
	done 
}

process_is_running()
# Purpose: report whether or not specified process is running
# Args:    $1:process-name
# Returns: 0:yes 1:no
{
	 return pidof $1
}

get_global_conf()
# Purpose: get value from param=value pair in schooner global config ini file
# Args:    $1:param
# Returns: 0:success 1:fail
# Stdout : if success, value corresponding to specified param, else ""
{
	sch-ini -a get-value -f $GlobalConf -s 'general' -p $1; return $? 
}

set_global_conf()
# Purpose: set value in param=value pair in schooner global config ini file
# Args:    $1:param $2:value
# Returns: 0:success 1:fail
{
	sch-ini -a set-value -f $GlobalConf -s 'general' -p $1  -v $2; return $%
}

get_user_conf()
# Purpose: get value from param=value pair in schooner user config ini file
# Args:    $1:param
# Returns: 0:success 1:fail
# Stdout : if success, value corresponding to specified param, else ""
{
	sch-ini -a get-value -f $UserConf -s 'general' -p $1; return $? 
}

set_user_conf()
# Purpose: set value in param=value pair in schooner user config ini file
# Args:    $1:param $2:value
# Returns: 0:success 1:fail
{
	sch-ini -a set-value -f $UserConf -s 'general' -p $1  -v $2; return $%
}

log_error()
# Purpose: write entry to error log
# Args:    $1:LINENO $2:Message
# Returns: 0:success 1:fail
{
	local LineNo=$1 Message=$2 Timestamp="$(date "+%m/%d/%y-%H:%M:%S")"
	local ErrLog=$(get_global_conf 'error-log')
	[ -f "$ErrLog" ] || echo > "$ErrLog"
	[ -f "$ErrLog" ] || { echo "Error log $ErrLog does not exist"; exit $Abort; }
	[ -w "$ErrLog" ] || { echo "Error log $ErrLog is not writable"; exit $Abort; }
	echo "$Timestamp: $Script: line $LineNo: $Message" >> "$ErrLog"
}

abend()
# Purpose: abort script after displaying and logging error message - if no
#          error message use a generic one.
# Args:    $1:LINENO $2:error-message ($2 is optional)
# Returns: never returns - always exits with $Abort
{
	local LineNo=$1 Message=$2
	[ "$Message" != '' ] || Message="Command failed"
	log_error "$LineNo" "Aborted: $Message"
	echo "$Script aborted at line $LineNo: $Message"
	exit $Abort
}

abend_if_root()
# Purpose: abort script if run by root
# Args:    $1:LINENO 
# Returns: never returns - abend always exits with $Abort
{
	[ "$User" != "root" ] || abend $1 "$Script must not be run as root"
}

abend_if_not_root()
# Purpose: abort script if not run by root
# Args:    $1:LINENO 
# Returns: never returns _ abend always exits with $Abort
{
	[ "$User" = "root" ] || abend $1 "$Script must be run as root"
}

abend_if_running()
# Purpose: call abend if specified process is running
# Args:    $1:LINENO $2:process-name 
# Returns: never returns - abend always exits with $Abort
{
	process_is_running $2
	if [ $? = 0 ]; then
		return 0
	else
		abend $2 "aborting because process $1 is running"
	fi
}

system_is_online()
# Purpose: test whether system is online or not
# Args:    none
# Returns: 0:online 1:offline
{
	local TmpFile=$(mktemp /tmp/sch-common-sys-online.tmp.XXXXXXXXXX)
	local WebPage=$(read_sch_conf 'general' 'test-web-page')
	/usr/bin/wget -q --tries=10 --timeout=20 "$WebPage" -O $TmpFile &amp;> /dev/null 
	
	if [ -s "$TmpFile" ]; then
		return 0
	else
		return 1
	fi
}

prompt_if_offline()
# Purpose: if system is offline prompt user to take some action
# Args:    $1:message
# Returns: 0:online 1:offline
{
	system_is_online
	if [ $? = 1 ]; then
		prompt_y_n "system is off line. connect then choose yes? or no to abort?"
		if [ $? = 1 ]; then
			abort "system is offline and you chose to abort at prompt" $LINENO
		else
			system_is_online
			if [ $? = 1 ]; then
				abort "system is offline and you chose to abort at prompt" $LINENO
			else
				return 0
			fi
		fi
	else
		return 0
	fi
}

convert_seconds_to_date()
# Purpose: convert seconds since epoch into date
# Args:    $1:seconds
# Returns: 0:success 1:fail
# Stdout:  date
{
	echo $(date --date "@$1") #return via stdout
}

# eof helpers ==================================================================</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>sch-script-template</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>#!/bin/bash 
#=======================================================================
# File:      %{script}
# Created:   %{date}
# Purpose:   %{purpose}
# Author:    %{author}
# Email:     %{emailx}
# Copyright: Â© %{author}
#
# Licence: This program is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or(at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see &lt;http://www.gnu.org/licenses/>.
#
#=======================================================================

usage()
# Purpose: describe usage of this script
# Args:    none
# Returns: 0 success
{
cat &lt;&lt; EOF
NAME
       %{script} - %{purpose}

SYNOPSIS
       %{script} [OPTION]... [FILE]...

DESCRIPTION
       %{usagedesc1}

       %{usagedesc2}

       -h help
              display this help and exit

       -v version
              output version information and exit

       -%{opt-1}
              %{opt1details}

       -%{opt-2}
              %{opt2details}

       -%{opt-3}
              %{opt3details}

       -%{opt-4}
              %{opt4details}

       %{optionsconcludingnotes}

EXIT STATUS
       0      if OK
       1      if failed       
       stdout %{putonstdout}
       
USAGE
       %{usage+examples1}
       
       %{usage+examples2}

EOF
}

# helpers =====================================================================
declare -r HostName="$(hostname)" 
declare -r Script="$(basename $0)" 
declare -r User="$(whoami)"
declare -r Now=$(date +"%Y-%m-%d-%H-%M")
declare -r Success=0 Fail=1 Abort=9 Yes=0 No=1
declare -r SchPath='/usr/share/schooner'
declare -r GlobalConf="$SchPath/global-conf"
declare -r UserSchPath="$HOME/.sch"
declare -r UserConf="$SchUserPath/user-conf"
declare -r SchDev='/home/attic/sch-dev'

prompt-y-n()
# Purpose: allow user to select yes/no response to message printed to terminal
# Args:    $1:message
# Returns: 0:yes 1:no
{
	echo $1	
	select YN in "Yes" "No"; do
		case $YN in
			Yes ) return 0;;
			No )  return 1;;
		esac
	done 
}

process-is-running()
# Purpose: report whether or not specified process is running
# Args:    $1:process-name
# Returns: 0:yes 1:no
{
	 return pidof $1
}

get-global-conf()
# Purpose: get value from param=value pair in schooner global config ini file
# Args:    $1:param
# Returns: 0:success 1:fail
# Stdout : if success, value corresponding to specified param, else ""
{
	sch-ini -a get-value -f $GlobalConf -s 'general' -p $1; return $? 
}

set-global-conf()
# Purpose: set value in param=value pair in schooner global config ini file
# Args:    $1:param $2:value
# Returns: 0:success 1:fail
{
	sch-ini -a set-value -f $GlobalConf -s 'general' -p $1  -v $2; return $%
}

get-user-conf()
# Purpose: get value from param=value pair in schooner user config ini file
# Args:    $1:param
# Returns: 0:success 1:fail
# Stdout : if success, value corresponding to specified param, else ""
{
	sch-ini -a get-value -f $UserConf -s 'general' -p $1; return $? 
}

set-user-conf()
# Purpose: set value in param=value pair in schooner user config ini file
# Args:    $1:param $2:value
# Returns: 0:success 1:fail
{
	sch-ini -a set-value -f $UserConf -s 'general' -p $1  -v $2; return $%
}

log-error()
# Purpose: write entry to error log
# Args:    $1:LINENO $2:Message
# Returns: 0:success 1:fail
{
	local LineNo=$1 Message=$2 Timestamp="$(date "+%m/%d/%y-%H:%M:%S")"
	local ErrLog=$(get-global-conf 'error-log')
	[[ -f "$ErrLog" ]] || {echo "Error log $ErrLog does not exist"; exit $Abort;}
	[[ -w "$ErrLog" ]] || {echo "Error log $ErrLog is not writable"; exit $Abort;}
	echo "$Timestamp: $Script: line $LineNo: $Message" >> "$ErrLog"
}

abend()
# Purpose: abort script after displaying and logging error message - if no
#          error message use a generic one.
# Args:    $1:LINENO $2:error-message ($2 is optional)
# Returns: never returns - always exits with $Abort
{
	local LineNo=$1 Message=$2
	[[ $Message != '' ]] || Message="Command failed"
	log-error "$LineNo" "Aborted: $Message"
	echo "$Script aborted at line $LineNo: $Message"
	exit $Abort
}

abend-if-root()
# Purpose: abort script if run by root
# Args:    $1:LINENO 
# Returns: never returns - abend always exits with $Abort
{
	[[ $User != "root" ]] || abend $1 "$Script must not be run as root"
}

abend-if-not-root()
# Purpose: abort script if not run by root
# Args:    $1:LINENO 
# Returns: never returns - abend always exits with $Abort
{
	[[ $User = "root" ]] || abend $1 "$Script must be run as root"
}

abend-if-process-running()
# Purpose: call abend if specified process is running
# Args:    $1:LINENO $2:process-name 
# Returns: never returns - abend always exits with $Abort
{
	process-is-running $2
	if [[ $? = 0 ]]; then
		return 0
	else
		abend $2 "aborting because process $1 is running"
	fi
}

system-is-online()
# Purpose: test whether system is online or not
# Args:    none
# Returns: 0:online 1:offline
{
	local TmpFile=$(mktemp /tmp/sch-common-sys-online.tmp.XXXXXXXXXX)
	local WebPage=$(read-sch-conf 'general' 'test-web-page')
	/usr/bin/wget -q --tries=10 --timeout=20 "$WebPage" -O $TmpFile &amp;> /dev/null 
	
	if [ -s "$TmpFile" ]; then
		return 0
	else
		return 1
	fi
}

prompt-if-offline()
# Purpose: if system is offline prompt user to take some action
# Args:    $1:message
# Returns: 0:online 1:offline
{
	system-is-online
	if [[ $? = 1 ]]; then
		prompt-y-n "system is off line. connect then choose yes? or no to abort?"
		if [[ $? = 1 ]]; then
			abort "system is offline and you chose to abort at prompt" $LINENO
		else
			system-is-online
			if [[ $? = 1 ]]; then
				abort "system is offline and you chose to abort at prompt" $LINENO
			else
				return 0
			fi
		fi
	else
		return 0
	fi
}

convert-seconds-to-date()
# Purpose: convert seconds since epoch into date
# Args:    $1:seconds
# Returns: 0:success 1:fail
# Stdout:  date
{
	echo $(date --date "@$1") #return via stdout
}

# eof helpers ==================================================================
</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>forget-function</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>forget_%{appname}()
# Purpose: forget %{appname} %{descript}
# Returns: 0:success 1:fail
{
	echo "forget_%{appname} not yet implemented"
}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>random-number-10-digit</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>tr -c -d 0-9 &lt; /dev/urandom | head -c 10</fillin>
 </item>
</snippets>
